{"version":3,"sources":["components/Home.jsx","components/AllContinents.jsx","components/Piechart.jsx","components/Footer.jsx","components/App.js","serviceWorker.js","index.js"],"names":["Home","handleClick","props","onOkSubmit","className","onClick","this","Component","AllContinents","data","map","element","continentName","countryName","selectAreaOrPopulation","areaInSqKm","population","Piechart","getSlice","sorted","slice","chart","remaining","length","sumPopulation","reduce","a","i","Number","sumArea","others","toString","push","getLabels","s","getPopulation","sorteddata","console","log","getArea","getColors","areaOrPop","loading","labels","datasets","backgroundColor","height","Footer","colspan","selectedAreaOrPopulation","App","handleSubmit","axios","get","then","response","setState","geonames","isLoading","state","filteredData","catch","err","handleContinentChange","e","result","target","value","filter","f","selectedContinent","handleChange","name","getContinents","continent","continents","indexOf","sort","sortby","id","ret1","ret2","b","filterdData","onChange","key","scope","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb75fd88.chunk.js","sourcesContent":["import React,{Component} from 'react'\n\nexport default class Home extends Component {\n    \n    handleClick=()=>{\n        this.props.onOkSubmit()\n    }\n    \n    render(){\n    return (\n        <div>\n            <div className=\"header\">\n                <h1>HYDRANE REACTJS FRONTEND DEV CASE STUDY</h1>\n                <button onClick={this.handleClick} className=\"button\">GO</button>             \n            </div>\n        </div>\n    )\n}\n}\n","import React, { Component } from 'react'\n\nexport default class AllContinents extends Component {\n    render() {\n        return (\n            <tbody>\n                    {this.props.data\n                    .map((element)=>{\n                        return(\n                        <tr>\n                            <td>{element.continentName}</td>\n                            <td>{element.countryName}</td>\n                            {(this.props.selectAreaOrPopulation===\"Area\" ||this.props.selectAreaOrPopulation===\"All\") && <td>{element.areaInSqKm}</td>}  \n                            {(this.props.selectAreaOrPopulation===\"Population\"||this.props.selectAreaOrPopulation===\"All\") && <td>{element.population}</td>}  \n                        </tr>\n                        )\n\n                    })}\n               </tbody>\n        )\n    }\n}\n","import {Pie} from 'react-chartjs-2'\nimport React, { Component } from 'react'\n\nexport default class Piechart extends Component {\n//slice the filtered data as per the chart count+1 and then find the remaining sum\ngetSlice=()=>{\n    var sorted=this.props.data.slice(0,this.props.chart)\n    var remaining=this.props.data.slice(this.props.chart+1,this.props.data.length) \n    var sumPopulation=remaining.reduce((a,i)=>{\n        return a+Number(i.population)\n\n    },0)\n    var sumArea=remaining.reduce((a,i)=>{ return a+Number(i.areaInSqKm) },0)\n    var others={}\n    others.countryName=\"others\"\n    others.population=sumPopulation.toString()\n    others.areaInSqKm=sumArea.toString()\n    sorted.push(others)\n    return sorted\n}\n   \ngetLabels=()=>{\n   var sorted=this.getSlice()\n    var labels= sorted.map((s)=>{\n        return s.countryName\n    })\n    return labels\n   \n}\ngetPopulation=()=>{\n    var sorted=this.getSlice()\n    var sorteddata=sorted.map((s)=>{\n        return s.population\n    })\n    console.log(sorteddata)\n   return sorteddata\n}\ngetArea=()=>{\n    var sorted=this.getSlice()\n    var sorteddata=sorted.map((s)=>{\n        return s.areaInSqKm\n    })\n   return sorteddata\n}\ngetColors=(chart)=>{\n    var colors=[\"red\",\"yellow\",\"green\",\"blue\",\"purple\",\"aqua\",\"brown\",\"lightgreen\",\"indigo\",\"lightpink\",\"magenta\",\"silver\",\"fuchsia\",\"darkorange\",\"darkgreen\",\"darksalmon\",\"gold\",\"darkorchid\",\"beige\",\"darkolivegreen\"]\n    return colors.slice(0,chart+1)   \n}\n\n    render() {\n        return (\n            <div className=\"piechart-container\">\n            {(this.props.areaOrPop===\"All\"||this.props.areaOrPop===\"Population\") &&(\n                <div className=\"piechart\">\n                    {(!this.props.loading)?null:<h3> Country Population</h3>}\n                    <Pie\n                            data={{\n                                labels:this.getLabels(),\n                                datasets:[{\n                                    data:this.getPopulation(),\n                                    backgroundColor:this.getColors(this.props.chart)}]\n                            }}\n                            height='80%'/>\n                </div>)}\n\n\n            {(this.props.areaOrPop===\"All\"||this.props.areaOrPop===\"Area\") &&(\n                <div className=\"piechart\">\n                    {(!this.props.loading)?null:<h3> Country Area</h3>}\n                        <Pie\n                            data={{\n                                labels:this.getLabels(),\n                                datasets:[{\n                                    data:this.getArea(),\n                                    backgroundColor:this.getColors(this.props.chart)}]\n                            }}\n                            height='80%'/>\n                </div>)}\n            </div>\n        )\n    }\n}\n\n","import React from 'react'\n\nexport default function Footer(props) {\n    return (\n        (!props.loading)?null: <tfoot>\n            <tr>\n                <td colspan=\"2\">TOTAL</td>\n                {(props.selectedAreaOrPopulation===\"Area\" ||props.selectedAreaOrPopulation===\"All\") && \n                <td>{props.data.reduce((a,i)=>{\n                        return a+Number(i.areaInSqKm)\n                    },0)}\n                </td>}  \n\n                {(props.selectedAreaOrPopulation===\"Population\"||props.selectedAreaOrPopulation===\"All\") && \n                <td>{props.data.reduce((a,i)=>{\n                        return a+Number(i.population)\n                    },0)}\n                </td>}\n            </tr>\n         </tfoot>\n        \n    )\n}\n","import React,{Component}from 'react';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './App.css';\nimport Home from './Home';\nimport axios from 'axios'\nimport AllContinents from './AllContinents'\nimport Piechart from './Piechart';\nimport Footer from './Footer';\n\n\nexport default class App extends Component {\n  constructor(){\n    super()\n    this.state={\n      isLoading:false,\n      data:[],\n      selectedContinent:\"All\",\n      selectAreaOrPopulation:\"All\",\n      chart:5,\n      filteredData:[],\n      sort:true //ascending\n\n    }\n  }\n  //Data fetch from API \n  handleSubmit=()=>{\n    axios.get('http://api.geonames.org/countryInfoJSON?formatted=true&username=hydrane')\n    .then(response=>{\n      this.setState({\n        data:response.data.geonames,\n        isLoading:!this.state.isLoading,\n        filteredData:response.data.geonames\n      })\n      console.log(this.state.data)\n    })\n    .catch(err=>console.log(err))\n\n  }\n\n  //handled continent change and prepared filter data\n  handleContinentChange=(e)=>{\n    const result = (e.target.value===\"All\")?this.state.data:this.state.data.filter(f => f.continentName===e.target.value)\n    this.setState({\n         selectedContinent:e.target.value,\n         filteredData:result\n    })\n    }\n  //handled area or population select\n  handleChange=(e)=>{\n    this.setState({\n      [e.target.name]:e.target.value\n    })\n  }\n  \n//extract name of continents from database filtering repeated ones and sorting alphabetically\ngetContinents=()=>{\n    return this.state.data\n      .map(element => element.continentName)\n      .filter((continent, i, continents) => continents.indexOf(continent) === i)\n      .sort();\n  }\n\n  //sorting data by ascending or descending\n  handleClick=(e)=>{\n    var sortby=e.target.id\n    var ret1 = (this.state.sort)? 1:-1\n    var ret2 = (this.state.sort)? -1:1\n    var sorted=[]\n    console.log(sortby,this.state.filteredData)\n    switch (sortby){\n      case \"continentName\":\n      case \"countryName\":\n        sorted=this.state.filteredData.sort((a,b)=>{\n          if(a[sortby]>b[sortby]) return ret1;\n          else if(a[sortby]<b[sortby]) return ret2;\n          else return 0\n        })\n       break;\n\n       case \"areaInSqKm\":\n       case \"population\":\n        sorted=this.state.filteredData.sort((a,b)=>{\n          if(Number(a[sortby])>Number(b[sortby])) return ret1;\n          else if(Number(a[sortby])<Number(b[sortby])) return ret2;\n          else return 0\n        })\n    }\n    this.setState({\n      sort:!this.state.sort,\n      filterdData:sorted\n    })\n    }\n\n  render(){\n  return (\n\n    <div className=\"App\">\n        <Home onOkSubmit={this.handleSubmit}/>\n\n        <div className=\"filters-container\">\n                <div className=\"filter\">\n                 <label>Filter by Continents</label>\n                        <select name=\"selectedContinent\" value={this.state.selectedContinent} onChange={this.handleContinentChange}>\n                             <option value=\"All\">All Continents</option>\n                                {this.getContinents().map(continent => (<option key={continent} value={continent}>{continent}</option> ))}\n                        </select>\n                </div>\n\n                <div className=\"filter\">\n                <label>Filter by Population/Area</label>\n                <select name=\"selectAreaOrPopulation\" value={this.state.selectAreaOrPopulation} onChange={this.handleChange}>\n                        <option value=\"All\">All</option>\n                        <option value=\"Area\">Area</option>\n                        <option value=\"Population\">Population</option>\n                 </select>\n                </div>\n\n                <div className=\"filter\">\n                <label>Chart max result</label>\n                <select name=\"chart\" value={this.state.chart} onChange={this.handleChange}>\n                        <option value=\"5\">5</option>\n                        <option value=\"10\">10</option>\n                        <option value=\"15\">15</option>\n                        <option value=\"20\">20</option>\n\n                 </select>\n                </div>\n\n            </div>\n\n      {(this.state.isLoading)&&<Piechart \n              data={this.state.filteredData} \n              chart={this.state.chart} \n              areaOrPop={this.state.selectAreaOrPopulation}\n              selectedContinent={this.state.selectedContinent}\n              selectAreaOrPopulation={this.state.selectAreaOrPopulation}\n              loading={this.state.isLoading}\n            />}\n           \n\n        <div className=\"table-container table-wrapper-scroll-y my-custom-scrollbar \">\n                \n          <table className=\"table table table-bordered table-striped mb-0\">\n            \n            {(!this.state.isLoading)?null:\n                    <thead>\n                        <tr>\n                                <th id=\"continentName\" onClick={this.handleClick}scope=\"col\">Continent &#9660; &#9650; </th>\n                                <th id=\"countryName\" onClick={this.handleClick} scope=\"col\">Country &#9660; &#9650;</th>\n                                 {(this.state.selectAreaOrPopulation===\"Area\" || this.state.selectAreaOrPopulation===\"All\") && <th onClick={this.handleClick} id=\"areaInSqKm\" scope=\"col\">Area &#9660; &#9650;</th>}\n                                {(this.state.selectAreaOrPopulation===\"Population\" || this.state.selectAreaOrPopulation===\"All\") && <th  onClick={this.handleClick} id=\"population\" scope=\"col\">Population &#9660; &#9650;</th> }                              \n                        </tr>\n                    </thead>  \n                }\n        \n            <AllContinents \n                data={this.state.filteredData} \n                selectedContinent={this.state.selectedContinent} \n                selectAreaOrPopulation={this.state.selectAreaOrPopulation}\n                loading={this.state.isLoading}\n              />\n\n              <Footer\n                    loading={this.state.isLoading}\n                    data={this.state.filteredData}\n                    selectedAreaOrPopulation={this.state.selectAreaOrPopulation}\n              />\n            </table>\n          </div>\n  </div>\n  );\n}\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}